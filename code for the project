pip install numpy pandas scikit-learn matplotlib


import numpy as np
import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler

# Sample data creation (replace this with your actual data)
# Assuming purchase history includes total purchases, number of visits, average purchase amount, etc.
data = {
    'CustomerID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'TotalPurchases': [500, 600, 700, 200, 1000, 1200, 300, 800, 700, 600],
    'NumVisits': [5, 6, 7, 2, 10, 12, 3, 8, 7, 6],
    'AvgPurchaseAmount': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Select features for clustering
features = df[['TotalPurchases', 'NumVisits', 'AvgPurchaseAmount']]

# Standardize the features
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

# Determine the optimal number of clusters using the elbow method
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=42)
    kmeans.fit(scaled_features)
    wcss.append(kmeans.inertia_)

# Plot the elbow graph
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

# Apply KMeans to the dataset with the optimal number of clusters (e.g., 3)
optimal_clusters = 3
kmeans = KMeans(n_clusters=optimal_clusters, init='k-means++', max_iter=300, n_init=10, random_state=42)
clusters = kmeans.fit_predict(scaled_features)

# Add the cluster assignments to the original DataFrame
df['Cluster'] = clusters

print(df)

# Visualize the clusters (assuming 3 features for simplicity in 2D)
plt.scatter(scaled_features[clusters == 0, 0], scaled_features[clusters == 0, 1], s=100, c='red', label='Cluster 1')
plt.scatter(scaled_features[clusters == 1, 0], scaled_features[clusters == 1, 1], s=100, c='blue', label='Cluster 2')
plt.scatter(scaled_features[clusters == 2, 0], scaled_features[clusters == 2, 1], s=100, c='green', label='Cluster 3')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='yellow', label='Centroids')
plt.title('Clusters of customers')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.legend()
plt.show()
